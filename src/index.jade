doctype html
html
	link(rel='stylesheet', type='text/css', href='build/build.css')
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
	title Cucumber, Protractor and BDD
	body
		article
			section 
				h1 Lessons Learned: 
				h2 CucumberJS &amp; Protractor
			section 
				ul
					li <h2>Overview</h2>
					li The theory: What we're trying to do
					li The practical: The implementation of Protractor, Cucumber 
			section 
				ul
					li <h3> Preface:</h3>
					li Work in progress
					li Socratic defense: I have no idea what I'm doing 
					li This ought to be viewed as part of wider discussions about the economics of testing
					li this is a `trench dispatch`, not a set of best-practices
			Section
				h3 The business objective: Continuous Delivery 
				ul
					li Context: AngularJS, Mobile development
					li Protractor - Selenium for AngularJS
					li CucumberJS - A BDD Syntax methodology: 
						pre
							<b>Given</b> The user is logged in
							<b>When</b> The user clicks on on the "edit" button
							<b>Then</b> The edit modal should appear 

						p Theory: take acceptance criteria, make tests, make tests pass

			section
				h3 Technical Intent
				ul
					li BDD's ideals: Minimizing crossover and waste between team functions
					li Integration tests for Devs
					li Remove Fragility, make devs aware of automation
					li The future: mobile automation and testing
					li Resource wall with testing
					li 'top down' approach for testing for developers
			section
				h3 The case for e2e testing for devs
					<img src="images/pyramid.png">
					p Source: Martin Fowler
			section
				<img width="100%" height="100%" src="images/testing.png">
			section
				h3 Why should you care?
				ul
					li Slow to run, but enormous coverage written fast 
					li True integration - tests everything 
					li Provides certainty, continuous delivery probably impossible without it 
			section 
				h3 To use Cucumber or Jasmine frameworks?  
				p <i>"Will the team (everyone, not only the tech people) benefit from scenarios written in plain English?  Is there a chance it'll help someone understand things better and communicate more efficiently?" <br /> <a href="http://www.infoq.com/news/2014/04/cucumberjs-bdd-biezemans"> Julien Biezemans, Interview with infoQ</a></i>
				p Not sure? use Jasmine, Cucumber's use cases are narrow, may work for us, probably not for everyone. 
			section
				p <b>Using Cucumber...</b>
					ul 
						li <b>Benefits: </b>
						li Engagement in development and testing by business with features 
						li Better scope-creep prevention as business is more aware of features being developed 
						li Better BDD syntax
					ul
						li <b>Costs</b>
						li Framework overhead (having to write feature files, Step Definitions)Definitions
						li Very new, somewhat unstable, little support, annoying debugging
						li popularity in decline in Ruby
			section
				h3 BDD's goal of cross-functional teamwork?
				p There is tension between business documents and technical ones: 
			section 
				p Business is concerned with conveying intent in a timely, communicable fashion.
				pre
					<b>Scenario</b> free Delivery
					<b>When</b> The customer has ordered 10 books
					<b>Then</b> They should have free delivery
			section 
				p Techs are concerned with reusability, making it work.
				pre
					<b>Scenario</b> Free delivery 
					<b>Given</b> The Customer is logged in
					<b>And</b> The customer is on the "/orders" page
					<b>And</b> the threshold for free delivery is "10" books 
					<b>And</b> the customer is &lt;type&gt; with &lt;books&gt; in the cart 
					<b>When</b> The customer clicks on "#order-button" 
					<b>Then</b> "#delivery-cost-field" should be "$0"
			section
				p If techs are editing the feature-files for reusability, what benefit are they getting over putting a simple comment above their tests? 
				p <b>Solution:</b> abstract away low-level functionality with <a href="http://www.thoughtworks.com/insights/blog/using-page-objects-overcome-protractors-shortcomings">page-objects</a>, keep specs high-level
			section
				h3 Architecture 
					<img width="100%" height="100%" src="images/architecture.png">
			section
				ul
					li 
						h3 Implementation 
					li Addressing the problems of brittleness in selenium 
					li Screenshot testing and the benefits of the top-down approach 
					li Browsers in use 
					li The future: Mobile automation 
					li The Async problem 
			section
				ul
					li <b>NEARLY ALL PROTRACTOR ACTIONS ARE ASYNC!?!</b>
					li There are a large number of series operations required 
					li Particularly difficult for QA's  
					li Protractor does make a good start on handling promises
					li Solution: employ Async, Q, Co, chai-as-promised liberally 
					li gnode for anything you need with ES6
			section
				ul
					li 
						h3 The Brittleness Problem	
					li Page Drivers
					li Data Automation Tags
					li Page inheritance
			section 
				ul
					li 
						h3 Looking forward 
					li Apium
					li Selendroid, Android, IOS automation
					li Saucelabs and third-party testing platforms
					li IOS automation
			section
				h3 Anything of interest here? 
				p make new mistakes, don't repeat ours. Example repo: 
				a http://bit.ly/1tSflCT
				p Criticism, suggestions appreciated.

		script(src='build/build.js')
