doctype html
html
	link(rel='stylesheet', type='text/css', href='build/build.css')
	head
		meta(charset='utf-8')
		meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
	title Cucumber, Protractor and BDD
	body

		article

			section 
				h1 Lessons Learned: 
				h2 CucumberJS &amp; Protractor
			section 
				h2 Overview 
				ul
					li The theory: What we're trying to do
					li The practical: The implementation of Protractor, Cucumber 
			section 
				ul
					li <h3> Preface:</h3>
					li Work in progress
					li Socratic defense: I have no idea what I'm doing 
					li This ought to be viewed as part of wider discussions about the economics of testing
					li this is a `trench dispatch`, not a set of best-practices
			Section
				h3 The business objective: Continuous Delivery 
				ul
					li Context: AngularJS, Mobile development
					li Protractor - Selenium for AngularJS
					li CucumberJS - A BDD Syntax methodology: 
						pre
							<b>Given</b> The user is logged in
							<b>When</b> The user clicks on on the "edit" button
							<b>Then</b> The edit modal should appear 
			section
				h3 Intent
					ul
						li Integration tests for Devs
						li Introducing 'functional' level tests
						li BDD's ideals: Minimizing crossover and waste between team functions
						li Solve the 'black box' problem with automation 
						li Remove Fragility, make devs aware of automation
			section
				h3 Intent continued
					ul
						li Angular awareness with automation
						li mobile automation and testing
						li Resource wall with testing
						li 'top down' approach 
			section
				h3 The case for e2e testing for devs
					<img src="images/pyramid.png">
					p Source: Martin Fowler
			section
				<img width="100%" height="100%" src="images/testing.png">
			section 
				h3 To use Cucumber or Jasmine?  
				p "Will the team (everyone, not only the tech people) benefit from scenarios written in plain English?  Is there a chance it'll help someone understand things better and communicate more efficiently?" <br /> <a href="http://www.infoq.com/news/2014/04/cucumberjs-bdd-biezemans">Julien Biezemans, Interview with infoQ</a>
			section
				p <b>Decisional criterion if devs wish to engage with BAs, QAs</b>: 
					ul 
						li <b>Benefits: </b>
						li Engagement in development and testing by business with features 
						li Better scope-creep prevention as business is more aware of features being developed 
						li Better BDD syntax
					ul
						li <b>Costs</b>
						li Framework overhead (having to write feature files, Step Definitions)Definitions
						li Very new, somewhat unstable, little support, annoying debugging
						li popularity in decline in Ruby
			section
				h3 Architecture 
					<img width="100%" height="100%" src="images/architecture.png">
			section
				ul
					li 
						h3 Technologies used
					li Addressing the problems of brittleness in selenium 
					li Screenshot testing and the benefits of the top-down approach 
					li Browsers in use 
					li The future: Mobile automation 
					li The Async problem 
			section
					ul
						li <b>NEARLY ALL PROTRACTOR ACTIONS ARE ASYNC!?!</b>
						li There are a large number of series operations required 
						li Particularly difficult for QA's  
						li Protractor does make a good start on handling promises
						li Solution: employ Async, Q, Co, chai-as-promised liberally 
							<table>
								<tr>
									<td>Q</td>
									<td>Async</td>
									<td>Co</td>
								</tr>
								<tr>
									<td>
										<pre>
											q.all(functionWhichMakesPromiseArray())
												.then(function(){
													cb();	
												}, 
												function(err){
													cb.failure(err);	
												});
										</pre>
									</td>
									<td>
										<pre>
											async.waterfall([
												function(cb){
													makeStuff(cb);
												},
												function(stuff, cb){
													workWithStuff(stuff, cb);
												},
											], function(err){
												console.error('BAD!', err);
											})
										</pre>
									</td>
									<td>
										<pre>
											co(function *(){
												var approved = yield page.getApprovedSnapshot();
												var approvedHash = crypto.createHash('md5').update(approved).digest('hex');
												var current = yield page.getSnap();
												var currentHash = crypto.createHash('md5').update(current).digest('hex');
												expect(currentHash).to.equal(approvedHash);
												cb();
											})();
										</pre>
									</td>
								</tr>
							</table>
						li gnode for anything you need with ES6
			section
				h3 The Brittleness Problem	
					ul
						li Page Drivers
						li Data Automation Tags
						li Page inheritance
			section 
				h3 Looking forward 
					ul
						li Apium
						li Selendroid, Android, IOS automation
						li Saucelabs and third-party testing platforms
						li IOS automation
			section
				h3 Anything of interest here? 
				p make new mistakes, don't repeat ours. Example repo: 
				a http://bit.ly/1tSflCT
				p Criticism, suggestions appreciated.

		script(src='build/build.js')
